---
import Col from "./Col.astro";
import Grid from "./Grid.astro";
import LogoColor from "./LogoColor.astro";

export interface Props {
  alwaysShow?: boolean;
}

const { alwaysShow } = Astro.props;
---

<nav class:list={["nav", { "always-show": !!alwaysShow }]}>
  <Grid>
    <Col size={12}>
      <div class="nav-contents">
        <a class="left-container" href="/#top" aria-label="Back to top">
          <LogoColor height={24} />
        </a>
        <div class="right-container">
          <a class="nav-link" href="/#about">
            <span class="nav-link-text">About</span>
          </a>
          <a class="nav-link" href="/#services">
            <span class="nav-link-text">Services</span>
          </a>
          <a class="nav-link" href="/articles">
            <span class="nav-link-text">Articles</span>
          </a>
          <a class="nav-link" href="/#contact">
            <span class="nav-link-text">Contact</span>
          </a>
        </div>
      </div>
    </Col>
  </Grid>
</nav>

<script>
  function setUpNav() {
    const navBar = document.querySelector("nav");
    const triggerElement = document.querySelector("#trigger");

    if (navBar == null || triggerElement == null) {
      return;
    }

    const rect = triggerElement.getBoundingClientRect();
    const initScrollPos = window.scrollY || document.documentElement.scrollTop;
    const triggerPos = rect.y + rect.height + initScrollPos;

    document.addEventListener("scroll", () => {
      const currentScrollPos =
        window.scrollY || document.documentElement.scrollTop;

      if (currentScrollPos > triggerPos) {
        navBar.classList.add("show");
      } else {
        navBar.classList.remove("show");
      }
    });
  }

  setUpNav();
</script>

<style lang="scss">
  @import "../styles/variables.scss";

  .nav {
    background-color: $color-white;
    border-bottom: 2px solid $color-black;
    position: fixed;
    transition: top 0.5s cubic-bezier(0.2, 0, 0, 1);
    top: -6rem;
    width: 100%;
    z-index: 100;

    &.show {
      top: 0;
    }

    &.always-show {
      top: 0 !important;
    }
  }

  .nav-contents {
    align-items: center;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  }

  .left-container {
    display: inline-flex;
    padding: $spacing-3 $spacing-3 $spacing-3 0;
  }

  .right-container {
    padding: $spacing-3 0 $spacing-3 0;

    > *:not(:last-child) {
      margin-right: $spacing-8;
    }
  }

  .nav-link {
    color: $color-black !important;
    text-decoration: none;

    &:focus,
    &:focus-within {
      outline: 4px solid $color-blue;
      outline-offset: 2px !important;

      .nav-link-text {
        background-size: 100% 2px;
      }
    }

    &:hover {
      .nav-link-text {
        background-size: 100% 2px;
      }
    }
  }

  .nav-link-text {
    background: linear-gradient(to left, $color-black, $color-black);
    background-size: 0 2px;
    background-position: 0 100%, 100% 100%;
    background-repeat: no-repeat;
    transition: background-size cubic-bezier(0, 0, 0.2, 1) 200ms;
  }
</style>
